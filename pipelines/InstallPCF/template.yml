# Resources
- type: replace
  path: /resources/-
  value:
    name: ((product_name))-product
    type: pivnet
    source:
      api_token: ((pivnet_token))
      product_slug: ((product_name))
      product_version: ((product_version))
      sort_by: semver

- type: replace
  path: /resources/-
  value:
    name: ((product_name))-stemcell
    type: pivnet
    source:
      api_token: ((pivnet_token))
      product_slug: ((product_stemcell_slug))
      product_version: ((product_stemcell_version))

# Add upload and stage job
- type: replace
  path: /jobs?/-
  value:
    name: upload-and-stage-((product_name))
    serial: true
    plan:
    - aggregate:
      - get: pcf-automation-image
        params:
          unpack: true
          globs: ["*.tgz"]
        passed:
        - upgrade-opsman
        trigger: true
      - get: pcf-automation-tasks
        params:
          unpack: true
          globs: ["*.zip"]
      - get: ((product_name))-product
        params:
          globs: [((product_glob))]
      - get: configuration
      - get: variable
      - get: pipeline-utilities

    # - task: generate-env
    #   file: configuration/tasks/generate-env/task.yml
    #   params:
    #     YAML: ((opsman_env))
    #     FILENAME: env.yml

    - task: create-env-file
      file: pipeline-utilities/tasks/create-env-file.yml
      params:
        OPSMAN_TARGET: ((opsman_target))
        OPSMAN_CONNECT_TIMEOUT: ((opsman_connect_timeout))
        OPSMAN_REQUEST_TIMEOUT: ((opsman_request_timeout))
        OPSMAN_SKIP_SSL_VALIDATION: ((opsman_skip_ssl_validation))
        OPSMAN_USERNAME: ((opsman_user.username))
        OPSMAN_PASSWORD: ((opsman_user.password))
        OPSMAN_DECRYPTION_PASSPHRASE: ((opsman_decryption_passphrase))
      
    - task: upload-and-stage-product
      image: pcf-automation-image
      file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
      input_mapping:
        product: ((product_name))-product
        env: env
      params:
        ENV_FILE: env.yml

# Add configure product job
- type: replace
  path: /jobs?/-
  value:
    name: configure-and-apply-change-((product_name))
    serial: true
    plan:
    - aggregate:
      - get: pcf-automation-image
        params:
          unpack: true
          globs: ["*.tgz"]
        passed:
        - upload-and-stage-((product_name))
        trigger: true
      - get: pcf-automation-tasks
        params:
          unpack: true
          globs: ["*.zip"]
      - get: configuration
      - get: variable
      - get: pipeline-utilities

    # - task: generate-env
    #   file: configuration/tasks/generate-env/task.yml
    #   params:
    #     YAML: ((opsman_env))
    #     FILENAME: env.yml

    - task: create-env-file
      file: pipeline-utilities/tasks/create-env-file.yml
      params:
        OPSMAN_TARGET: ((opsman_target))
        OPSMAN_CONNECT_TIMEOUT: ((opsman_connect_timeout))
        OPSMAN_REQUEST_TIMEOUT: ((opsman_request_timeout))
        OPSMAN_SKIP_SSL_VALIDATION: ((opsman_skip_ssl_validation))
        OPSMAN_USERNAME: ((opsman_user.username))
        OPSMAN_PASSWORD: ((opsman_user.password))
        OPSMAN_DECRYPTION_PASSPHRASE: ((opsman_decryption_passphrase))

    - task: extract-((product_name))-secrets
      file: pipeline-utilities/tasks/create-product-secrets.yml
      params:
        ((product_secrets))
          
    - task: configure-((product_name))
      image: pcf-automation-image
      file: pcf-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: env
        vars: variable
        secrets: secrets
      params:
        CONFIG_FILE: foundations/((foundation))/products/((product_name))/((product_name)).yml
        VARS_FILES: |
          vars/((product_location))/product-default-vars.yml
          vars/((product_location))/errand-vars.yml
          vars/((product_location))/resource-vars.yml
          vars/foundations/((foundation))/products/((product_name))/((product_name))-vars.yml
          secrets/product.yml
        ENV_FILE: env.yml

    - task: apply-product-changes-((product_name))
      image: pcf-automation-image
      file: configuration/tasks/product-apply-changes.yml
      input_mapping:
        env: env
      params:
        ENV_FILE: env.yml
        PRODUCT: ((product_name))

# Add upload stemcell job
- type: replace
  path: /jobs?/-
  value:
    name: upload-stemcell-((product_name))
    serial: true
    plan:
    - aggregate:
      - get: pcf-automation-image
        params:
          unpack: true
          globs: ["*.tgz"]
        passed:
        - upgrade-opsman
        trigger: true
      - get: pcf-automation-tasks
        params:
          unpack: true
          globs: ["*.zip"]
      - get: ((product_name))-stemcell
        trigger: true
        params:
          globs: ["*-((stemcell_iaas))*"]
      - get: pipeline-utilities
    
    - task: create-env-file
      file: pipeline-utilities/tasks/create-env-file.yml
      params:
        OPSMAN_TARGET: ((opsman_target))
        OPSMAN_CONNECT_TIMEOUT: ((opsman_connect_timeout))
        OPSMAN_REQUEST_TIMEOUT: ((opsman_request_timeout))
        OPSMAN_SKIP_SSL_VALIDATION: ((opsman_skip_ssl_validation))
        OPSMAN_USERNAME: ((opsman_user.username))
        OPSMAN_PASSWORD: ((opsman_user.password))
        OPSMAN_DECRYPTION_PASSPHRASE: ((opsman_decryption_passphrase))

    - task: upload-stemcell-((product_name))
      image: pcf-automation-image
      file: pcf-automation-tasks/tasks/upload-stemcell.yml
      input_mapping:
        env: env
        stemcell: ((product_name))-stemcell
      params:
        ENV_FILE: env.yml
