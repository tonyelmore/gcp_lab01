resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: pcf-automation-tasks
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((pcf_automation_version))

- name: pcf-automation-image
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((pcf_automation_version))

- name: opsman-image
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ops-manager
    product_version: ((opsman_version))

- name: pipeline-utilities
  type: git
  source:
    uri: https://github.com/pivotalservices/pipeline-utilities.git

- name: installation
  type: gcs-resource
  source:
    bucket: ((config_bucket))
    json_key: ((config_storage_account_key))
    versioned_file: installation.zip

- name: state
  type: gcs-resource
  source:
    bucket: ((config_bucket))
    json_key: ((config_storage_account_key))
    versioned_file: state.yml

- name: configuration
  type: git
  source:
    private_key: ((configuration_private_key))
    uri: ((configuration_uri))
    branch: master

- name: variable
  type: git
  source:
    private_key: ((variable_private_key))
    uri: ((variable_uri))
    branch: master

- name: one-time-trigger
  type: time
  source:
    interval: 999999h

- name: daily-trigger
  type: time
  source:
    interval: 24h

jobs:
- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
        globs: ["*.tgz"]
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs: ["*.zip"]
    - get: opsman-image
      params:
        globs: [((opsman_image_wildcard))]

    - get: configuration
    - get: variable
    - get: state
    - get: pipeline-utilities

    - get: one-time-trigger
      trigger: true

  - task: create-opsman-secrets
    file: pipeline-utilities/tasks/create-product-secrets.yml
    params:
      PRODUCT_opsman_service_account_json: ((opsman_service_account_json))

  - task: create-vm
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman-image
      config: configuration
      vars: variable
    params:
      VARS_FILES: |
        vars/foundations/((foundation))/opsman-vars.yml
        secrets/product.yml
      OPSMAN_CONFIG_FILE: common-config/opsman.yml
    ensure: &make-state-commit
      put: state
      params: { file: generated-state/state.yml }

  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: {{opsman_target}}
      OPSMAN_CONNECT_TIMEOUT: {{opsman_connect_timeout}}
      OPSMAN_REQUEST_TIMEOUT: {{opsman_request_timeout}}
      OPSMAN_SKIP_SSL_VALIDATION: {{opsman_skip_ssl_validation}}
      OPSMAN_USERNAME: ((opsman_user.username))
      OPSMAN_PASSWORD: ((opsman_user.password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman_decryption_passphrase))

  - task: generate-auth
    file: pipeline-utilities/tasks/create-auth-file.yml
    params:
      OPSMAN_USERNAME: ((opsman_user.username))
      OPSMAN_PASSWORD: ((opsman_user.password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman_env.decryption-passphrase))
      OUTPUT_FILE_NAME: auth.yml
  
  - task: configure-authentication
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    params:
      ENV_FILE: env.yml
      AUTH_CONFIG_FILE: auth.yml

  - task: env_to_yml
    file: pipeline-utilities/tasks/create-product-secrets.yml
    params:
      PRODUCT_iaas-configuration_auth_json: ((opsman_service_account_json))
    
  - task: configure-director
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration
      env: env
      vars: variable
      secrets: secrets
    params:
      VARS_FILE: {{director_vars_files}}
      ENV_FILE: env.yml
      DIRECTOR_CONFIG_FILE: common-config/director.yml

  - task: apply-director-changes
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: env
    params:
      ENV_FILE: env.yml

- name: export-installation
  serial: true
  plan:
  - aggregate:
    - get: daily-trigger
      trigger: true
    - get: pcf-automation-image
      params:
        unpack: true
        globs: ["*.tgz"]
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs: ["*.zip"]
    - get: configuration
    - get: variable
  - task: generate-env
    file: configuration/tasks/generate-env/task.yml
    params:
      YAML: ((opsman_env))
      FILENAME: env.yml
  - task: export-installation
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: env
    params:
      ENV_FILE: env.yml
  - put: installation
    params:
      file: installation/installation.zip 

# - name: upgrade-opsman
#   serial: true
#   serial_groups: [ install ]
#   plan:
#   - aggregate:
#     - get: one-time-trigger
#       passed: [ install-opsman ]
#     - get: pcf-automation-image
#       params:
#         unpack: true
#         globs: ["*.tgz"]
#       trigger: true
#     - get: pcf-automation-tasks
#       params:
#         unpack: true
#         globs: ["*.zip"]
#     - get: opsman-image
#     - get: installation
#       passed: [ export-installation ]
#     - get: configuration
#     - get: variable
#     # Unused???
#     # - get: pipeline-utilities

#   - task: generate-opsman-config
#     file: configuration/tasks/generate-config/task.yml
#     params:
#       YAML:
#         opsman-configuration: ((opsman-configuration))
#       FILENAME: opsman.yml

#   - task: generate-env
#     file: configuration/tasks/generate-env/task.yml
#     params:
#       YAML: ((opsman_env))
#       FILENAME: env.yml

#   - task: upgrade-opsman
#     image: pcf-automation-image
#     file: pcf-automation-tasks/tasks/upgrade-opsman.yml
#     input_mapping:
#       image: opsman-image
#       state: configuration
#       config: configuration
#       env: env
#       vars: variable
#       installation: installation  # Do we need this here or does the get make it available? Asking because not in reference pipeline
#     params:
#       ENV_FILE: env.yml
#       OPSMAN_CONFIG_FILE: opsman.yml
#       STATE_FILE: ((foundation))/state/state.yml
#       INSTALLATION_FILE: installation.zip  # This is the default - only here for clarity - this is for director only
#     ensure: *make-state-commit

#   - task: apply-director-changes
#     image: pcf-automation-image
#     file: pcf-automation-tasks/tasks/apply-director-changes.yml
#     input_mapping:
#       env: env
#     params:
#       ENV_FILE: env.yml

# - name: apply-product-changes
#   serial: true
#   plan:
#   - aggregate:
#     - get: pcf-automation-image
#       params:
#         unpack: true
#         globs: ["*.tgz"]
#       trigger: true
#     - get: pcf-automation-tasks
#       params:
#         unpack: true
#         globs: ["*.zip"]
#     - get: configuration
#     - get: variable

#   - task: generate-env
#     file: configuration/tasks/generate-env/task.yml
#     params:
#       YAML: ((opsman_env))
#       FILENAME: env.yml

#   - task: apply-product-changes
#     image: pcf-automation-image
#     file: pcf-automation-tasks/tasks/apply-changes.yml
#     input_mapping:
#       env: env
#     params:
#       ENV_FILE: env.yml
